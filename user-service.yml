server:
  port: 8100

spring:
  application:
    name: user-service
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DB_URL:jdbc:postgresql://localhost:5432/flight_booking?currentSchema=user_service}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      username: ${REDIS_USERNAME}
      password: ${REDIS_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: latest

# üîê JWT ÏÑ§Ï†ï Ï∂îÍ∞Ä
service:
  jwt:
    access-token-expiration: 86400000 # 1Ïùº
    refresh-token-expiration: 604800000 # 7Ïùº
    secret-key: ${SECRET_KEY}

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        minimumNumberOfCalls: 5
        slowCallRateThreshold: 100
        slowCallDurationThreshold: 60000
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 20s

management:
  endpoints:
    web:
      exposure:
        include: prometheus  # Prometheus Î©îÌä∏Î¶≠ ÎÖ∏Ï∂ú
  metrics:
    export:
      prometheus:
        enabled: true  # Prometheus ÌôúÏÑ±Ìôî




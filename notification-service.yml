server:
  port: 8160

spring:
  application:
    name: notification-service
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DB_URL:jdbc:postgresql://localhost:5432/flight_booking?currentSchema=notification_service}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: notification-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  mail:
    host: ${SMTP_HOST}             # ✅ SMTP 호스트 추가
    port: ${SMTP_PORT}              # ✅ SMTP 포트 추가
    username: ${SMTP_USERNAME}    # ✅ SMTP 계정 추가
    password: ${SMTP_PASSWORD}       # ✅ SMTP 비밀번호 추가
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        minimumNumberOfCalls: 5
        slowCallRateThreshold: 100
        slowCallDurationThreshold: 60000
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 20s

management:
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: ${ZIPKIN_ENDPOINT:http://localhost:9411/api/v2/spans}
  endpoints:
    web:
      exposure:
        include: health, info, prometheus


